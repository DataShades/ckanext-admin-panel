{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ckanext-admin-panel","title":"ckanext-admin-panel","text":"<p>Next generation admin interface for CKAN. See the extended documentation for more information.</p> <p>[!WARNING] This extension is under active development. Expect breaking changes.</p>"},{"location":"#todo","title":"TODO","text":"<p>This extension is under development, so there are many things to do:</p> <ul> <li>CKAN forms:<ul> <li>What do we want to do, if we are editing an entity from admin panel? Use default form or replace it with an admin version?</li> </ul> </li> <li>Users:<ul> <li>Add <code>User edit</code> page</li> </ul> </li> <li>Recent log messages:<ul> <li>We have  some types, that we don't want to include in list. E.g xloader resources. Research what is better to do with them.</li> <li>Rework the pagination approach, because the current naive one will work very slow on big amount of data</li> </ul> </li> <li>Think about configuration section pages. Do we need a separate page for a section?</li> <li>Work on <code>Extensions</code> page. What do we want: replace <code>status_show</code>. This page should be more informative. Show here what extensions we are using with the respective versions. For now we don't have a standartized mechanism to retrieve versions from extensions, think about it.</li> <li>Work on <code>Available updates?</code> page. Show user if he could upgrade an extension or CKAN to a new version.</li> <li>Work on <code>Appearance</code> page. TODO</li> <li>Work on <code>Help</code> page. TODO</li> </ul>"},{"location":"#license","title":"License","text":"<p>AGPL</p>"},{"location":"configuration/","title":"Configuration options","text":"<p>Here you can find a list of configuration options available for this extension.</p>"},{"location":"configuration/#show-toolbar-theme-switcher","title":"Show toolbar theme switcher","text":"<p><code>ckanext.admin_panel.show_toolbar_theme_switcher</code> [optional]</p> <p>Enable/disable theme switcher on a toolbar</p> <p>Options: <code>True</code>, <code>False</code></p> <p>Type: <code>bool</code></p> <p>Default: <code>True</code></p>"},{"location":"helpers/","title":"Helper Functions","text":"<p>Helper functions are functions usually meant to be used in templates to perform some specific tasks. They are defined in the <code>helpers.py</code> file of the extension.</p>"},{"location":"helpers/#list-of-helper-functions","title":"List of Helper Functions","text":""},{"location":"helpers/#ap_main.helpers.build_url_from_params","title":"<code>build_url_from_params(endpoint, url_params, row)</code>","text":"<p>Build an action URL based on the endpoint and URL parameters.</p> <p>The url_params might contain values like $id, $type, etc. We need to replace them with the actual values from the row</p> PARAMETER DESCRIPTION <code>endpoint</code> <p>The endpoint to build the URL for</p> <p> TYPE: <code>str</code> </p> <code>url_params</code> <p>The URL parameters to build the URL for</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>row</code> <p>The row to build the URL for</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>ckanext/ap_main/helpers.py</code> <pre><code>@helper\ndef build_url_from_params(\n    endpoint: str, url_params: dict[str, Any], row: dict[str, Any]\n) -&gt; str:\n    \"\"\"Build an action URL based on the endpoint and URL parameters.\n\n    The url_params might contain values like $id, $type, etc.\n    We need to replace them with the actual values from the row\n\n    Args:\n        endpoint: The endpoint to build the URL for\n        url_params: The URL parameters to build the URL for\n        row: The row to build the URL for\n    \"\"\"\n    params = url_params.copy()\n\n    for key, value in params.items():\n        if value.startswith(\"$\"):\n            params[key] = row[value[1:]]\n\n    return tk.url_for(endpoint, **params)\n</code></pre>"},{"location":"helpers/#ap_main.helpers.calculate_priority","title":"<code>calculate_priority(value, threshold)</code>","text":"<p>Calculate the priority of a value based on a threshold.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to calculate the priority for</p> <p> TYPE: <code>int</code> </p> <code>threshold</code> <p>The threshold to compare the value to</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The priority of the value</p> Example <pre><code>from ckanext.ap_main.helpers import calculate_priority\n\npriority = calculate_priority(10, 100)\nprint(priority) # low\n</code></pre> Source code in <code>ckanext/ap_main/helpers.py</code> <pre><code>@helper\ndef calculate_priority(value: int, threshold: int) -&gt; str:\n    \"\"\"Calculate the priority of a value based on a threshold.\n\n    Args:\n        value: The value to calculate the priority for\n        threshold: The threshold to compare the value to\n\n    Returns:\n        The priority of the value\n\n    Example:\n        ```python\n        from ckanext.ap_main.helpers import calculate_priority\n\n        priority = calculate_priority(10, 100)\n        print(priority) # low\n        ```\n    \"\"\"\n    percentage = value / threshold * 100\n\n    if percentage &lt; 25:\n        return \"low\"\n    elif percentage &lt; 50:\n        return \"medium\"\n    elif percentage &lt; 75:\n        return \"high\"\n    else:\n        return \"urgent\"\n</code></pre>"},{"location":"helpers/#ap_main.helpers.dumps","title":"<code>dumps(value)</code>","text":"<p>Convert a value to a JSON string.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to convert to a JSON string</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The JSON string</p> Source code in <code>ckanext/ap_main/helpers.py</code> <pre><code>@helper\ndef dumps(value: Any) -&gt; str:\n    \"\"\"Convert a value to a JSON string.\n\n    Args:\n        value: The value to convert to a JSON string\n\n    Returns:\n        The JSON string\n    \"\"\"\n    return json.dumps(value)\n</code></pre>"},{"location":"helpers/#ap_main.helpers.generate_page_unique_class","title":"<code>generate_page_unique_class()</code>","text":"<p>Build a unique css class for each page.</p> RETURNS DESCRIPTION <code>str</code> <p>A unique css class for the current page</p> Source code in <code>ckanext/ap_main/helpers.py</code> <pre><code>@helper\ndef generate_page_unique_class() -&gt; str:\n    \"\"\"Build a unique css class for each page.\n\n    Returns:\n        A unique css class for the current page\n    \"\"\"\n\n    return tk.h.ap_munge_string((f\"ap-{tk.request.endpoint}\"))\n</code></pre>"},{"location":"helpers/#ap_main.helpers.get_config_sections","title":"<code>get_config_sections()</code>","text":"<p>Prepare a config section structure for render.</p> RETURNS DESCRIPTION <code>list[SectionConfig]</code> <p>A list of sections with their config items</p> Source code in <code>ckanext/ap_main/helpers.py</code> <pre><code>@helper\ndef get_config_sections() -&gt; list[SectionConfig]:\n    \"\"\"Prepare a config section structure for render.\n\n    Returns:\n        A list of sections with their config items\n    \"\"\"\n    config_sections = {}\n\n    for _, section in ap_utils.collect_sections_signal.send():\n        config_sections.setdefault(\n            section[\"name\"], {\"name\": section[\"name\"], \"configs\": []}\n        )\n        config_sections[section[\"name\"]][\"configs\"].extend(section[\"configs\"])\n\n    sections = list(config_sections.values())\n    sections.sort(key=lambda x: x[\"name\"])\n\n    return sections\n</code></pre>"},{"location":"helpers/#ap_main.helpers.get_toolbar_structure","title":"<code>get_toolbar_structure()</code>","text":"<p>Prepare a toolbar structure for render.</p> <p>An extension can register its own toolbar buttons by implementing the <code>register_toolbar_button</code> method in the <code>IAdminPanel</code> interface.</p> RETURNS DESCRIPTION <code>list[ToolbarButton]</code> <p>A list of toolbar button objects</p> Source code in <code>ckanext/ap_main/helpers.py</code> <pre><code>@helper\n@Cache(duration=900)  # cache for 15 minutes\ndef get_toolbar_structure() -&gt; list[ToolbarButton]:\n    \"\"\"Prepare a toolbar structure for render.\n\n    An extension can register its own toolbar buttons by implementing the\n    `register_toolbar_button` method in the `IAdminPanel` interface.\n\n    Returns:\n        A list of toolbar button objects\n    \"\"\"\n    configuration_subitems = [\n        ToolbarButton(\n            label=section[\"name\"],\n            subitems=[\n                ToolbarButton(\n                    label=config_item[\"name\"], url=tk.url_for(config_item[\"blueprint\"])\n                )\n                for config_item in section[\"configs\"]\n            ],\n        )\n        for section in get_config_sections()\n    ]\n\n    default_structure = [\n        ToolbarButton(\n            label=tk._(\"Content\"),\n            icon=\"fa fa-folder\",\n            url=tk.url_for(\"ap_content.list\"),\n        ),\n        ToolbarButton(\n            label=tk._(\"Configuration\"),\n            icon=\"fa fa-gear\",\n            url=tk.url_for(\"ap_config_list.index\"),\n            subitems=configuration_subitems,\n        ),\n        ToolbarButton(\n            label=tk._(\"Users\"),\n            icon=\"fa fa-user-friends\",\n            url=tk.url_for(\"ap_user.list\"),\n            subitems=[\n                ToolbarButton(\n                    label=tk._(\"Add user\"),\n                    url=tk.url_for(\"ap_user.create\"),\n                    icon=\"fa fa-user-plus\",\n                )\n            ],\n        ),\n        ToolbarButton(\n            label=tk._(\"Reports\"),\n            icon=\"fa fa-chart-bar\",\n            subitems=[],\n        ),\n        ToolbarButton(\n            icon=\"fa fa-user\",\n            url=tk.url_for(\"user.read\", id=tk.current_user.name),\n            label=tk.current_user.display_name,\n            attributes={\"title\": tk._(\"View profile\"), \"class\": \"ms-lg-auto\"},\n        ),\n        ToolbarButton(\n            icon=\"fa fa-gavel\",\n            url=tk.url_for(\"admin.index\"),\n            aria_label=tk._(\"Old admin\"),\n            attributes={\"title\": tk._(\"Old admin\")},\n        ),\n        ToolbarButton(\n            icon=\"fa fa-tachometer\",\n            url=tk.url_for(\"dashboard.datasets\"),\n            aria_label=tk._(\"View dashboard\"),\n            attributes={\"title\": tk._(\"View dashboard\")},\n        ),\n        ToolbarButton(\n            icon=\"fa fa-cog\",\n            url=tk.url_for(\"user.edit\", id=tk.current_user.name),\n            aria_label=tk._(\"Profile settings\"),\n            attributes={\"title\": tk._(\"Profile settings\")},\n        ),\n    ]\n\n    if tk.h.ap_show_toolbar_theme_switcher():\n        default_structure.append(\n            ToolbarButton(\n                icon=\"fa-solid fa-moon\",\n                aria_label=tk._(\"Theme Switcher\"),\n                url=\"#\",\n                attributes={\n                    \"title\": tk._(\"Theme Switcher\"),\n                    \"data-module\": \"ap-theme-switcher\",\n                    \"class\": \"ap-theme-switcher\",\n                },\n            ),\n        )\n\n    # place logout button at the end\n    default_structure.append(\n        ToolbarButton(\n            icon=\"fa fa-sign-out\",\n            url=tk.url_for(\"user.logout\"),\n            aria_label=tk._(\"Log out\"),\n            attributes={\"title\": tk._(\"Log out\")},\n        )\n    )\n\n    for plugin in reversed(list(p.PluginImplementations(IAdminPanel))):\n        default_structure = plugin.register_toolbar_button(default_structure)\n\n    return default_structure\n</code></pre>"},{"location":"helpers/#ap_main.helpers.munge_string","title":"<code>munge_string(value)</code>","text":"<p>Munge a string using CKAN's munge_name function.</p> PARAMETER DESCRIPTION <code>value</code> <p>The string to munge</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The munged string</p> Source code in <code>ckanext/ap_main/helpers.py</code> <pre><code>@helper\ndef munge_string(value: str) -&gt; str:\n    \"\"\"Munge a string using CKAN's munge_name function.\n\n    Args:\n        value: The string to munge\n\n    Returns:\n        The munged string\n    \"\"\"\n    return munge.munge_name(value)\n</code></pre>"},{"location":"helpers/#ap_main.helpers.show_toolbar_theme_switcher","title":"<code>show_toolbar_theme_switcher()</code>","text":"<p>Check if the toolbar theme switcher should be displayed.</p> Source code in <code>ckanext/ap_main/helpers.py</code> <pre><code>@helper\ndef show_toolbar_theme_switcher() -&gt; bool:\n    \"\"\"Check if the toolbar theme switcher should be displayed.\"\"\"\n    return ap_config.show_toolbar_theme_switcher()\n</code></pre>"},{"location":"helpers/#ap_main.helpers.user_add_role_options","title":"<code>user_add_role_options()</code>","text":"<p>Return a list of options for a user add form.</p> RETURNS DESCRIPTION <code>list[dict[str, str | int]]</code> <p>A list of options for a user add form</p> Source code in <code>ckanext/ap_main/helpers.py</code> <pre><code>@helper\ndef user_add_role_options() -&gt; list[dict[str, str | int]]:\n    \"\"\"Return a list of options for a user add form.\n\n    Returns:\n        A list of options for a user add form\n    \"\"\"\n    return [\n        {\"value\": \"user\", \"text\": \"Regular user\"},\n        {\"value\": \"sysadmin\", \"text\": \"Sysadmin\"},\n    ]\n</code></pre>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#requirements","title":"Requirements","text":"<p>Compatibility with core CKAN versions:</p> CKAN version Compatible? 2.9 no 2.10 yes 2.11 yes"},{"location":"install/#installation_1","title":"Installation","text":"<ol> <li> <p>Install the extension from <code>PyPI</code>:     <pre><code>pip install ckanext-admin-panel\n</code></pre></p> </li> <li> <p>Enable the main plugin and extra plugins you want to use in your CKAN configuration file (e.g. <code>ckan.ini</code> or <code>production.ini</code>):</p> <pre><code>ckan.plugins = ... admin_panel admin_panel_log ...\n</code></pre> </li> <li> <p>Initialize all missing tables with: <code>ckan db pending-migrations --apply</code></p> </li> </ol>"},{"location":"install/#developer-installation","title":"Developer installation","text":"<p>To install <code>ckanext-admin-panel</code> for development, activate your CKAN virtualenv and do:</p> <pre><code>git clone https://github.com/DataShades/ckanext-admin-panel.git\ncd ckanext-admin-panel\npip install -e .\n</code></pre>"},{"location":"install/#extra-plugins","title":"Extra plugins","text":"<p>In addition to the main plugin, <code>ckanext-admin-panel</code> introduces several extensions that enhance the basic functionality by providing convenient tools for working with logs, cron jobs, and more.</p> <p>See the Features section for a list of available plugins and information on how to enable them.</p>"},{"location":"install/#dependencies","title":"Dependencies","text":"<p>The extension requires the following CKAN extensions to be installed and enabled:</p> <ol> <li> <p><code>ckanext-scheming</code>: We're using the scheming extension to create custom forms for plugin configuration pages. See the documentation for more information.</p> </li> <li> <p><code>ckanext-editable-config</code>: The <code>ckanext-editable-config</code> extension allows you to edit the CKAN configuration in runtime.</p> </li> </ol>"},{"location":"interfaces/","title":"Interfaces","text":""},{"location":"interfaces/#iadminpanel","title":"IAdminPanel","text":"<p>Extends the functionallity of the Admin Panel.</p>"},{"location":"interfaces/#ap_main.interfaces.IAdminPanel.after_config_update","title":"<code>after_config_update(schema_id, data_before_update, data)</code>","text":"<p>Called after generic view configuration update.</p> <p>Could be used to perform additional actions after configuration update.</p> PARAMETER DESCRIPTION <code>schema_id</code> <p>an arbitrary schema ID</p> <p> </p> <code>data_before_update</code> <p>a dictionary with configuration data before update</p> <p> </p> <code>data</code> <p>a dictionary with configuration data after update</p> <p> </p> Example <pre><code>def after_config_update(schema_id, data_before_update, data):\n    if schema_id == 'my_schema':\n        do_something()\n</code></pre>"},{"location":"interfaces/#ap_main.interfaces.IAdminPanel.before_config_update","title":"<code>before_config_update(schema_id, data)</code>","text":"<p>Called before generic view configuration update.</p> <p>Could be used to modify configuration data before it is saved.</p> PARAMETER DESCRIPTION <code>schema_id</code> <p>an arbitrary schema ID</p> <p> </p> <code>data</code> <p>a dictionary with configuration data</p> <p> </p> Example <pre><code>def before_config_update(schema_id, data):\n    if schema_id == 'my_schema':\n        data['my_field'] = 'my_value'\n</code></pre>"},{"location":"interfaces/#ap_main.interfaces.IAdminPanel.get_formatters","title":"<code>get_formatters()</code>","text":"<p>Allows an extension to register its own tabulator formatters.</p> Example <pre><code>def get_formatters():\n    return {'col_counter': col_counter}\n</code></pre> RETURNS DESCRIPTION <code>dict[str, Formatter]</code> <p>A mapping of formatter names to tabulator formatter functions</p>"},{"location":"interfaces/#ap_main.interfaces.IAdminPanel.register_toolbar_button","title":"<code>register_toolbar_button(toolbar_buttons_list)</code>","text":"<p>Register toolbar buttons.</p> <p>Extension will receive the list of toolbar button objects. It can modify the list and return it back.</p> Example <pre><code>import ckanext.ap_main.types as ap_types\n\ndef register_toolbar_button(toolbar_buttons_list):\n    toolbar_buttons_list.append(\n        ap_types.ToolbarButton(\n            label='My Button',\n            url=tk.h.url_for('my_controller.my_action'),\n            icon='fa-star',\n            attributes={'class': 'text'},\n        )\n    )\n    return toolbar_buttons_list\n</code></pre> RETURNS DESCRIPTION <code>list[ToolbarButton]</code> <p>A list of toolbar button objects</p>"},{"location":"register_config_page/","title":"Register configuration page","text":"<p>One of the admin panel feature is the ability to easily create a configuration page for your extension.</p> <p>The <code>ckanext-admin-panel</code> introduces a generic view that can be used to create a configuration page for your extension. This gives us the following benefits:</p> <ul> <li>The configuration form is generated based on the schema you define. It's fast and easy to create a configuration page.</li> <li>The values submitted in the form are stored in the database with <code>ckanext-editable-config</code>, so you don't have to worry about handling the configuration values yourself.</li> <li>It's easy to change and maintain the configuration schema.</li> <li>The configuration depends on config declaration - a native CKAN feature. You decide if the configuration option could be edited in a runtime or not.</li> <li>You can use regular CKAN validators in your config declaration to validate the configuration values.</li> <li>You can reset the configuration to the default values (if the default value is specified in the config declaration).</li> </ul> <p></p> Note <p>You define the URL where the configuration page will be available. We suggest to use a <code>/admin-panel/example</code> prefix for your bluepritn, where <code>example</code> is a name of your plugin. E.g. <code>/admin-panel/example/config</code>.</p> Note <p>The configuration form will be generated based on the schema you defined in the <code>config_schema.yaml</code> file.</p> Warning <p>The values submitted in the form will be stored in the <code>editable_config_option</code> table in the database. Make sure to use the <code>ckanext-editable-config</code> extension.</p>"},{"location":"register_config_page/#registering-a-configuration-page","title":"Registering a configuration page","text":""},{"location":"register_config_page/#defining-the-config-declaration","title":"Defining the config declaration","text":"<p>The configuration declaration is a <code>yaml</code> file that defines the configuration fields for your extension. This allows to validate the current configuration against the declaration, or check which config options in the CKAN config file are not declared (and might have no effect). Refer to the CKAN documentation for more information, as we're not going to describe it in detail here.</p> <p>Register a <code>config_declaration.yaml</code> file in your extension directory. See the example below:</p> <pre><code>version: 1\ngroups:\n  - annotation: Admin panel example\n    options:\n      - key: ckanext.ap_example.footer_html\n        editable: true\n        validators: ignore_empty unicode_safe wysiwyg_sanitize_html\n\n      - key: ckanext.ap_example.header_html\n        editable: true\n\n      - key: ckanext.ap_example.summernote\n        editable: true\n        validators: ignore_empty unicode_safe wysiwyg_sanitize_html\n\n      - key: ckanext.ap_example.drupal_url\n        editable: true\n        validators: ignore_empty unicode_safe url_validator\n\n      - key: ckanext.ap_example.cache.duration\n        type: int\n        default: 3600\n        editable: true\n\n      - key: ckanext.ap_example.timeout\n        type: int\n        default: 5\n        editable: true\n\n      - key: ckanext.ap_example.request.user\n        editable: true\n\n      - key: ckanext.ap_example.request.pass\n        editable: true\n\n      - key: ckanext.ap_example.api_version\n        default: core\n        editable: true\n\n      - key: ckanext.ap_example.core.menu_export_endpoint\n        editable: true\n        default: \"/resource/layout/export\"\n</code></pre>"},{"location":"register_config_page/#defining-the-configuration-schema","title":"Defining the configuration schema","text":"<p>The configuration schema is a YAML file that defines the configuration fields for your extension. The schema follows the same format as the <code>ckanext-scheming</code> schema.</p> <p>Create a <code>config_schema.yaml</code> file in your extension directory. See the example below, where we use the configuration key as a <code>field_name</code>:</p> <pre><code>scheming_version: 2\nschema_id: admin_panel_example_config\nabout: An example how to use scheming for config page\n\nfields:\n  - field_name: ckanext.ap_example.footer_html\n    label: CKEditor 5\n    form_snippet: wysiwyg_ckeditor5.html\n    display_snippet: wysiwyg_ckeditor5.html\n\n  - field_name: ckanext.ap_example.summernote\n    label: Summernote\n    form_snippet: wysiwyg_summernote.html\n    display_snippet: wysiwyg_summernote.html\n\n  - field_name: ckanext.ap_example.cache.duration\n    label: Cache TTL\n    form_placeholder: 600\n    input_type: number\n\n  - field_name: ckanext.ap_example.drupal_url\n    label: Drupal base URL\n    required: true\n    display_snippet: link.html\n\n  - field_name: ckanext.ap_example.api_version\n    label: API version\n    preset: select\n    required: true\n    choices:\n      - value: json\n        label: JSON API\n      - value: core\n        label: Core REST API\n\n  - field_name: ckanext.ap_example.core.menu_export_endpoint\n    label: Menu export API endpoint\n    required: true\n    help_text: If you are using the core API version, you might face the situation when your endpoint differ from the default one\n\n  - field_name: ckanext.ap_example.timeout\n    label: API request timeout\n    input_type: number\n\n  - field_name: ckanext.ap_example.request.user\n    label: HTTP auth user\n\n  - field_name: ckanext.ap_example.request.pass\n    label: HTTP auth password\n    input_type: password\n</code></pre>"},{"location":"register_config_page/#register-the-config-section-and-your-schema","title":"Register the config section and your schema","text":"<p>We're using the <code>ISignal</code> interface to register the configuration section and the schema file.</p> <pre><code># ISignal\n\ndef get_signal_subscriptions(self) -&gt; SignalMapping:\n    return {\n        tk.signals.ckanext.signal(\"ap_main:collect_config_sections\"): [\n            self.collect_config_sections_subscriber,\n        ],\n        tk.signals.ckanext.signal(\"ap_main:collect_config_schemas\"): [\n            self.collect_config_schemas_subs\n        ],\n    }\n\n@staticmethod\ndef collect_config_sections_subscriber(sender: None):\n    return ap_types.SectionConfig(\n        name=\"Admin panel example\",\n        configs=[\n            ap_types.ConfigurationItem(\n                name=\"Example settings\",\n                blueprint=\"ap_example.config\",\n                info=\"An example of schema-generated configuration form\",\n            ),\n            ap_types.ConfigurationItem(\n                name=\"Example display\",\n                blueprint=\"ap_example.display\",\n                info=\"Example of displaying values submitted from a form\",\n            ),\n        ],\n    )\n\n@staticmethod\ndef collect_config_schemas_subs(sender: None):\n    return [\"ckanext.ap_example:config_schema.yaml\"]\n</code></pre>"},{"location":"register_config_page/#register-the-blueprint","title":"Register the blueprint","text":"<p>Refer to the CKAN documentation if you have any problems with registering a blueprint.</p> <ol> <li> <p>Implement the <code>IBlueprint</code> interface in your extension or use the <code>blanket</code> for a shortcut (CKAN 2.10+).</p> <pre><code>class AdminPanelExamplePlugin(p.SingletonPlugin):\n    p.implements(p.IBlueprint)\n\n    def get_blueprint(self):\n        return ...\n</code></pre> <p>or</p> <pre><code>@tk.blanket.blueprints\nclass AdminPanelExamplePlugin(p.SingletonPlugin):\n    ...\n</code></pre> </li> <li> <p>Create <code>views.py</code> file in your extension's directory and define the views for your configuration page.     See example below, where we use the <code>schema_id</code> from the config schema we defined.</p> <pre><code>from flask import Blueprint\n\nfrom ckanext.ap_main.utils import ap_before_request\nfrom ckanext.ap_main.views.generics import ApConfigurationPageView\n\n\nlog = logging.getLogger(__name__)\nap_example = Blueprint(\"ap_example\", __name__, url_prefix=\"/admin-panel/example\")\nap_example.before_request(ap_before_request)\n\n...\n\nap_example.add_url_rule(\n    \"/config\",\n    view_func=ApConfigurationPageView.as_view(\"config\", \"admin_panel_example_config\"),\n)\n</code></pre> </li> <li> <p>This will generate a configuration page for your extension in the admin panel.</p> </li> </ol>"},{"location":"register_config_section/","title":"Register config section","text":"<p>We utilize the <code>ISignal</code> interface for gathering configuration sections. For instance, to register a configuration section from your extension:</p> <pre><code>from __future__ import annotations\n\nimport ckan.types as types\nimport ckan.plugins as p\nimport ckan.plugins.toolkit as tk\n\nimport ckanext.ap_main.types as ap_types\n\n\nclass ExamplePlugin(p.SingletonPlugin):\n    ...\n    p.implements(p.ISignal)\n\n    ...\n\n    # ISignal\n\n    def get_signal_subscriptions(self) -&gt; types.SignalMapping:\n        return {\n            tk.signals.ckanext.signal(\"ap_main:collect_config_sections\"): [\n                self.collect_config_sections_subs\n            ],\n        }\n\n    @staticmethod\n    def collect_config_sections_subs(sender: None):\n        return ap_types.SectionConfig(\n            name=\"Example plugin configuration\",\n            configs=[\n                ap_types.ConfigurationItem(\n                    name=\"Configuration\",\n                    blueprint=\"example_plugin.config,\n                    info=\"Basic configuration options\",\n                ),\n            ],\n        )\n</code></pre> <p>The structure of the section config:</p> <ul> <li><code>name</code> - defines the name of the configuration section</li> <li><code>configs</code> - a list of configuration items</li> </ul> Source code in <code>ckanext/ap_main/types.py</code> <pre><code>class SectionConfig(TypedDict):\n    name: str\n    configs: list[\"ConfigurationItem\"]\n</code></pre> <p>The structure of the configuration item:</p> <ul> <li><code>name</code> - defines the name of the configuration item link</li> <li><code>blueprint</code> - indicates the configuration page blueprint</li> <li><code>info</code> (optional, default: <code>No description</code>) - provides a description for the configuration link</li> </ul> Source code in <code>ckanext/ap_main/types.py</code> <pre><code>class ConfigurationItem(TypedDict, total=False):\n    name: str\n    blueprint: str\n    info: Optional[str]\n</code></pre> <p>You can import these structures and use them to assemble the section or just return a dictionary mirroring the same structure. This method works the same as described above:</p> <pre><code>@staticmethod\ndef collect_config_sections_subs(sender: None):\n    return {\n        \"name\": \"Example plugin configuration\",\n        \"configs\": [\n            {\n                \"name\": \"Configuration\",\n                \"blueprint\": \"example_plugin.config\",\n                \"info\": \"Basic configuration options\",\n            },\n        ],\n    }\n</code></pre> <p>If the section with the specified <code>name</code> has already been registered by another plugin, the configuration options will be included into it.</p>"},{"location":"tests/","title":"Tests","text":"<p>To run the tests, do:</p> <pre><code>pytest --ckan-ini=test.ini\n</code></pre>"},{"location":"utils/","title":"Utility Functions","text":"<p>Utility functions are meant to be used in the extension codebase to perform some specific tasks. They are defined in the <code>utils.py</code> file of the extension.</p> <p>Some utils functions could be useful for other extensions as well. You can use them by importing the <code>ap_main.utils</code> module.</p> <pre><code>import ckanext.admin_panel.utils as ap_utils\n</code></pre>"},{"location":"utils/#list-of-utility-functions","title":"List of Utility Functions","text":""},{"location":"utils/#ap_main.utils.ap_before_request","title":"<code>ap_before_request()</code>","text":"<p>Check if user has access to the admin panel.</p> <p>Calls <code>admin_panel_access</code> auth function to check if user has access to the admin panel view. If you want to change the auth function logic, you can chain it.</p> RAISES DESCRIPTION <code>NotAuthorized</code> <p>If user does not have access to the admin panel</p> Example <pre><code>from flask import Blueprint, Response\n\nfrom ckanext.ap_main.utils import ap_before_request\n\nblueprint = Blueprint(\"my_blueprint\", __name__, url_prefix=\"/admin-panel/my_blueprint\")\nblueprint.before_request(ap_before_request)\n</code></pre> Source code in <code>ckanext/ap_main/utils.py</code> <pre><code>def ap_before_request() -&gt; None:\n    \"\"\"Check if user has access to the admin panel.\n\n    Calls `admin_panel_access` auth function to check if user has access to the\n    admin panel view. If you want to change the auth function logic, you can chain it.\n\n    Raises:\n        tk.NotAuthorized: If user does not have access to the admin panel\n\n    Example:\n        ```python\n        from flask import Blueprint, Response\n\n        from ckanext.ap_main.utils import ap_before_request\n\n        blueprint = Blueprint(\"my_blueprint\", __name__, url_prefix=\"/admin-panel/my_blueprint\")\n        blueprint.before_request(ap_before_request)\n        ```\n    \"\"\"\n    try:\n        tk.check_access(\n            \"admin_panel_access\",\n            {\"user\": tk.current_user.name},\n        )\n    except tk.NotAuthorized:\n        tk.abort(403, tk._(\"Need to be system administrator to administer\"))\n</code></pre>"},{"location":"utils/#ap_main.utils.get_all_formatters","title":"<code>get_all_formatters()</code>","text":"<p>Get all registered tabulator formatters.</p> <p>A formatter is a function that takes a column value and can modify its appearance in a table.</p> RETURNS DESCRIPTION <code>dict[str, Formatter]</code> <p>A mapping of formatter names to formatter functions</p> Source code in <code>ckanext/ap_main/utils.py</code> <pre><code>def get_all_formatters() -&gt; dict[str, ap_types.Formatter]:\n    \"\"\"Get all registered tabulator formatters.\n\n    A formatter is a function that takes a column value and can modify its appearance\n    in a table.\n\n    Returns:\n        A mapping of formatter names to formatter functions\n    \"\"\"\n    if not _renderers_cache:\n        for plugin in reversed(list(p.PluginImplementations(IAdminPanel))):\n            for name, fn in plugin.get_formatters().items():\n                _renderers_cache[name] = fn\n\n    return _renderers_cache\n</code></pre>"},{"location":"utils/#ap_main.utils.get_config_schema","title":"<code>get_config_schema(schema_id)</code>","text":"<p>Get a schema by its id from the loaded schemas.</p> PARAMETER DESCRIPTION <code>schema_id</code> <p>The id of the schema to get</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict[Any, Any] | None</code> <p>The schema if found, otherwise None</p> Source code in <code>ckanext/ap_main/utils.py</code> <pre><code>def get_config_schema(schema_id: str) -&gt; dict[Any, Any] | None:\n    \"\"\"Get a schema by its id from the loaded schemas.\n\n    Args:\n        schema_id: The id of the schema to get\n\n    Returns:\n        The schema if found, otherwise None\n    \"\"\"\n    from ckanext.scheming.plugins import _expand_schemas, _load_schemas\n\n    for _, schemas_paths in collect_config_schemas_signal.send():\n        schemas = _load_schemas(schemas_paths, \"schema_id\")\n        expanded_schemas = _expand_schemas(schemas)\n\n        if schema := expanded_schemas.get(schema_id):\n            return schema\n</code></pre>"},{"location":"features/","title":"Index","text":"<p>In addition to the main plugin, <code>ckanext-admin-panel</code> introduces several extensions that enhance the basic functionality by providing convenient tools for working with logs, cron jobs, and more.</p> <p>The following plugins are available:</p> <ul> <li><code>admin_panel_log</code>: Provides a simple interface for viewing and filtering the logs.</li> <li><code>admin_panel_cron</code>: Allows you to manage cron jobs through the web interface.</li> <li><code>admin_panel_doi</code>: Adds a DOI support to the CKAN datasets.</li> </ul>"},{"location":"features/cron/","title":"Index","text":"<p>The <code>admin_panel_cron</code> plugin allows you to manage cron jobs through the web interface. The cron jobs can call only CKAN actions for the security reasons.</p>"},{"location":"features/cron/install/","title":"Install","text":"<p>To enable the <code>admin_panel_cron</code> plugin, you need to add it to the <code>ckan.plugins</code> setting in your CKAN config file.</p> <pre><code>ckan.plugins = admin_panel admin_panel_cron\n</code></pre> <p>After that, initialize all missing tables with: <pre><code>ckan db pending-migrations --apply\n</code></pre></p>"},{"location":"features/cron/install/#enable-cron-logging","title":"Enable CRON logging","text":"<p>You can register a separate logger for a cron job logging. The DB handler must be initiated first if you want to have an access to logs via UI. Otherwise, you will be able to see logs only in CKAN logs files. See the logging section for more information.</p> <p>Having a separate logger for cron jobs allows you to filter logs by the cron job name and to have a separate log file for them.</p> <ol> <li>Define a logger     <pre><code>[logger_ap_cron]\nlevel = DEBUG\nhandlers = console, dbHandler\nqualname = ap_cron\npropagate = 0\n</code></pre></li> <li>Use the newly created logger by specifiyng it in <code>loggers</code> section.     <pre><code>[loggers]\nkeys = root, ckan, ckanext, werkzeug, flask_app, ap_cron\n</code></pre></li> </ol>"},{"location":"features/cron/usage/","title":"Usage","text":""},{"location":"features/cron/usage/#scheduling","title":"Scheduling","text":"<p>Each cron job can be manually triggered from the cron manager page. However, it's essential to schedule a single command with crontab to automatically trigger all jobs created within CKAN. For example:     <pre><code>*/10 * * * * /usr/lib/ckan/default/bin/ckan -c /etc/ckan/default/production.ini ap-cron trigger-jobs\n</code></pre></p> <p>This command checks all the jobs every 10 minutes to determine if they should be run again. Without scheduling this command, you can manually initiate a specific job through the user interface by clicking the <code>Run</code> button. Alternatively, you can execute all scheduled jobs by clicking the <code>Run active jobs</code> button.</p>"},{"location":"features/cron/usage/#create-cron-job","title":"Create cron job","text":"<p>To create a cron job, navigate to the cron manager page and click the <code>Add cron job</code> button.</p> <p></p> <p>Each job must include the following components:</p> <ul> <li>Name: A label used primarily in the UI for identification.</li> <li>Actions: One or more CKAN actions that will be executed.</li> <li>Data: JSON-formatted data that provides arguments to the initial action.</li> <li>Job Timeout: The maximum duration allowed for a job to run before it is deemed to have failed.</li> <li>Schedule: A cron expression that specifies the frequency and timing of the job execution.</li> </ul> Info <p>It is important to note that console commands are not permitted within cron jobs for security reasons. Instead, only CKAN actions can be executed. You can chain multiple actions together; each subsequent action will receive the result of the previous one as its arguments.</p>"},{"location":"features/doi/","title":"DOI","text":"<p>The <code>admin_panel_doi</code> plugin implements a convenient dashboard to manage DOIs in CKAN. It is built on top of the <code>ckanext-doi</code> plugin and provides a user-friendly interface to track your DOIs and their associated datasets.</p>"},{"location":"features/doi/configuration/","title":"Configuration","text":"<p>The extension allows you to configure the DOI extension via the UI. The configuration options are the same as the ones available in the <code>ckanext-doi</code> plugin.</p> <p>Plus, we're adding a config option to enable/disable the DOI feature. As the original extension doesn't allow us to create/update datasets without proper credentials, we've added a Mock API calls option to avoid the issue. It might be useful for testing purposes using a local environment.</p> <p></p>"},{"location":"features/doi/install/","title":"Install","text":"<ol> <li> <p>Enable the <code>doi</code> and <code>admin_panel_doi</code> extension in the CKAN configuration file (e.g. <code>production.ini</code>):</p> <pre><code>ckan.plugins = ... ap_doi admin_panel_doi\n</code></pre> </li> <li> <p>Create the DOI database table:</p> <pre><code>ckan -c production.ini doi initdb\n</code></pre> </li> </ol>"},{"location":"features/doi/install/#dependencies","title":"Dependencies","text":"<p>The DOI feature requires the following dependencies to be installed and enabled:</p> <ul> <li><code>ckanext-admin-panel</code> plugin</li> <li><code>ckanext-doi</code> plugin</li> <li><code>ckanext-flakes</code> plugin</li> </ul> <p>Ensure, that you've installed the <code>ckanext-admin-panel</code> with the <code>doi</code> depdendencies, like this: <code>pip install -e '.[doi]'</code></p>"},{"location":"features/doi/usage/","title":"Usage","text":"<p>The <code>admin_panel_doi</code> extension adds a DOI support to the CKAN datasets. For this, you'll have to add a field to the dataset schema and configure the plugin.</p>"},{"location":"features/doi/usage/#updating-the-dataset-schema","title":"Updating the dataset schema","text":"<p>The <code>admin_panel_doi</code> adds a scheming preset that you can use to add a DOI field to the dataset schema:</p> <pre><code>scheming_presets_version: 2\nabout: AP DOI presets\nabout_url: http://github.com/ckan/ckanext-scheming#preset\n\npresets:\n  - preset_name: ap_doi\n    values:\n      field_name: doi\n      label: Dataset DOI\n      form_snippet: hidden.html\n      display_snippet: text.html\n</code></pre> <p>Follow the instructions below to add the DOI field to your dataset schema:</p> <ol> <li> <p>First of all, specify a scheming preset file in the CKAN configuration file. For example, add the following line to the <code>development.ini</code> file:</p> <pre><code>scheming.presets = ... ckanext.ap_doi:presets.yaml\n</code></pre> </li> <li> <p>Add a new field to your dataset schema:</p> <pre><code>- preset: ap_doi\n</code></pre> </li> </ol>"},{"location":"features/doi/usage/#dashboard","title":"Dashboard","text":"<p>This dashboard provides comprehensive tools to manage datasets DOI efficiently. It offers functionality for listing, searching, updating, and filtering datasets based on their DOI status, with a user-friendly and high-performance AJAX-powered interface.</p> <p>Features:</p> <ol> <li>DOI Management. Update DOI for a single dataset or multiple datasets in bulk.</li> <li>Search Functionality. Quickly search for datasets by their title.</li> <li>Filtering Options. Filter datasets by their DOI status to focus on specific categories:<ul> <li>Missing</li> <li>Outdated</li> <li>Published</li> </ul> </li> <li>Pagination Support. Efficiently navigate large lists of datasets using pagination for improved performance and usability.</li> <li>High Performance. Built with AJAX for faster interactions and seamless updates without full-page reloads.</li> </ol> <p></p>"},{"location":"features/logging/","title":"Index","text":"<p>The <code>admin_panel_log</code> plugin provides a simple interface for viewing and filtering the logs through the web interface. The logs are stored in the CKAN database and can be accessed through the admin panel.</p>"},{"location":"features/logging/install/","title":"Install","text":"<p>To store log messages in a database, you must enable the <code>admin_panel_log</code> extension, initialize the database log table, and create a handler in your ckan config file.</p> <ol> <li>Add <code>admin_panel_log</code> to the <code>ckan.plugins</code> setting in your CKAN config file.</li> <li>Initialize all missing tables with: <code>ckan db pending-migrations --apply</code></li> <li> <p>To register a handler, you must specify it in your CKAN configuration file. Due to some CKAN specifics, the logger needs to know the database URI to initialize itself. Provide it with the <code>kwargs</code> option.     <pre><code>[handler_dbHandler]\nclass = ckanext.ap_log.log_handlers.DatabaseHandler\nformatter = generic\nlevel = NOTSET\nkwargs={\"db_uri\": \"postgresql://ckan_default:pass@localhost/master\"}\n</code></pre></p> </li> <li> <p>The logging handler must be also included in <code>[handlers]</code> section.     <pre><code>[handlers]\nkeys = console, dbHandler\n</code></pre></p> </li> <li>The last thing you need to do is to add our handler to a logger you need. For example, if you want to log only <code>ckan</code> logs, do this:     <pre><code>[logger_ckan]\nlevel = INFO\nhandlers = console, dbHandler\n</code></pre></li> </ol>"},{"location":"features/logging/usage/","title":"Usage","text":"<p>After you have set up the logging handler, you can access the logs through the admin panel. The logs are displayed in a table with the following columns:</p> <ul> <li>Name: The name of the logger that generated the log message.</li> <li>Path: The path to the module that generated the log message.</li> <li>Level: The log level of the message.</li> <li>Timestamp: The time when the log message was generated. Format: <code>DD/MM/YYYY - HH:MM</code>.</li> <li>Message: The log message itself.</li> </ul> <p></p>"},{"location":"features/logging/usage/#filters","title":"Filters","text":"<p>Fitler widget allows you to filter logs by different criterias:</p> <ul> <li>Search: Filter logs by the message content.</li> <li>Level: Filter logs by one or multiple levels.</li> <li>Type: Filter logs by one or multuple log names.</li> </ul>"},{"location":"tables/","title":"Tables","text":"<p>To represent the tabular data in the admin panel, we use tabulator.js.</p> <p>To create a table, you have to inherit the <code>TableDefinition</code> class and implement the <code>get_raw_data</code> method.</p>"},{"location":"tables/#simple-approach","title":"Simple Approach","text":"<p>Here's a simple example of creating a table:</p> <pre><code>from ckanext.ap_main.table import TableDefinition\n\nclass MyTable(TableDefinition):\n    def get_raw_data(self):\n        return [\n            {\n                \"id\": \"1\",\n                \"title\": \"Welcome to CKAN\",\n                \"author\": \"admin\",\n                \"created\": \"2024-01-15\",\n                \"status\": \"published\"\n            },\n            {\n                \"id\": \"2\",\n                \"title\": \"Getting Started Guide\",\n                \"author\": \"editor\",\n                \"created\": \"2024-01-16\",\n                \"status\": \"draft\"\n            }\n        ]\n\n    def get_columns(self):\n        return [\n            {\"field\": \"id\", \"title\": \"ID\", \"width\": 60},\n            {\"field\": \"title\", \"title\": \"Title\", \"minWidth\": 200},\n            {\"field\": \"author\", \"title\": \"Author\"},\n            {\"field\": \"created\", \"title\": \"Created\"},\n            {\"field\": \"status\", \"title\": \"Status\"}\n        ]\n</code></pre>"},{"location":"tables/#advanced-approach","title":"Advanced Approach","text":"<p>For more complex tables with formatters, actions, and global actions, you can use the advanced approach:</p> <pre><code>from ckanext.ap_main.table import TableDefinition, ColumnDefinition, ActionDefinition, GlobalActionDefinition\n\nclass UserTable(TableDefinition):\n    def __init__(self):\n        super().__init__(\n            name=\"user\",\n            ajax_url=tk.url_for(\"ap_user.list\", data=True),\n            placeholder=tk._(\"No users found\"),\n            columns=[\n                ColumnDefinition(\"id\", visible=False, filterable=False),\n                ColumnDefinition(\n                    \"name\",\n                    formatters=[(\"user_link\", {})],\n                    tabulator_formatter=\"html\",\n                    min_width=300,\n                ),\n                ColumnDefinition(\n                    \"fullname\",\n                    formatters=[(\"none_as_empty\", {})],\n                    min_width=200,\n                ),\n                ColumnDefinition(\n                    \"email\",\n                    formatters=[(\"none_as_empty\", {})],\n                    min_width=200,\n                ),\n                ColumnDefinition(\"state\"),\n                ColumnDefinition(\"sysadmin\", formatters=[(\"bool\", {})]),\n                ColumnDefinition(\n                    \"actions\",\n                    formatters=[(\"actions\", {})],\n                    filterable=False,\n                    tabulator_formatter=\"html\",\n                    sorter=None,\n                    resizable=False,\n                ),\n            ],\n            actions=[\n                ActionDefinition(\n                    \"edit\",\n                    icon=\"fa fa-pencil\",\n                    endpoint=\"user.edit\",\n                    url_params={\"id\": \"$id\"},\n                ),\n                ActionDefinition(\n                    \"view\",\n                    icon=\"fa fa-eye\",\n                    endpoint=\"user.read\",\n                    url_params={\"id\": \"$id\"},\n                ),\n            ],\n            global_actions=[\n                GlobalActionDefinition(\n                    action=\"add_sysadmin\",\n                    label=\"Add sysadmin role to selected users\"\n                ),\n                GlobalActionDefinition(\n                    action=\"remove_sysadmin\",\n                    label=\"Remove sysadmin role from selected users\",\n                ),\n                GlobalActionDefinition(\n                    action=\"block\",\n                    label=\"Block selected users\"\n                ),\n                GlobalActionDefinition(\n                    action=\"unblock\",\n                    label=\"Unblock selected users\"\n                ),\n            ],\n        )\n\n    def get_raw_data(self):\n        query = (\n            model.Session.query(\n                model.User.id.label(\"id\"),\n                model.User.name.label(\"name\"),\n                model.User.fullname.label(\"fullname\"),\n                model.User.email.label(\"email\"),\n                model.User.state.label(\"state\"),\n                model.User.sysadmin.label(\"sysadmin\"),\n            )\n            .filter(model.User.name != tk.config[\"ckan.site_id\"])\n            .order_by(model.User.name)\n        )\n\n        columns = [\"id\", \"name\", \"fullname\", \"email\", \"state\", \"sysadmin\"]\n        return [dict(zip(columns, row)) for row in query.all()]\n</code></pre> <p>The <code>get_raw_data</code> method should return a list of dictionaries, where the keys are the column names and the values are the column values.</p>"},{"location":"tables/#column-definition","title":"Column Definition","text":"<p>The <code>ColumnDefinition</code> class allows you to define how each column should be rendered:</p> <p>Defines how a column should be rendered in Tabulator</p>"},{"location":"tables/#ap_main.table.ColumnDefinition.__init__","title":"<code>__init__(field, title=None, formatters=None, tabulator_formatter=None, tabulator_formatter_params=None, width=None, min_width=None, visible=True, sorter='string', filterable=True, resizable=True)</code>","text":"<p>Initialize a column definition</p> PARAMETER DESCRIPTION <code>field</code> <p>The field name in the data dict</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The display title for the column</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>formatters</code> <p>List of formatters to apply to the column</p> <p> TYPE: <code>list</code> DEFAULT: <code>None</code> </p> <code>tabulator_formatter</code> <p>Tabulator formatter to apply to the column</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>tabulator_formatter_params</code> <p>Parameters for the tabulator formatter</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>width</code> <p>Width of the column</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>min_width</code> <p>Minimum width of the column</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether the column is visible</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>sorter</code> <p>Default sorter for the column</p> <p> TYPE: <code>str</code> DEFAULT: <code>'string'</code> </p> <code>filterable</code> <p>Whether the column can be filtered</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>resizable</code> <p>Whether the column is resizable</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"tables/#ap_main.table.ColumnDefinition.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the column definition to a dict for JSON serialization</p>"},{"location":"tables/#actions","title":"Actions","text":"<p>You can define two types of actions:</p> <ol> <li>Row Actions: Actions that can be performed on individual rows</li> <li>Global Actions: Actions that can be performed on multiple selected rows</li> </ol> <p>Actions are defined using <code>ActionDefinition</code> and <code>GlobalActionDefinition</code> classes respectively.</p>"},{"location":"tables/formatters/","title":"Formatters","text":"<p>We're using formatters to display the data in a certain way. The extension provides a few built-in formatters, but you can also create your own custom formatters and register it with an interface provided by the extension. See the interface documentation for more information.</p> <p>See the example below, where we're using the <code>date</code> formatter to display the date in a more readable format, and a <code>user_link</code> formatter that recieves a user ID and returns a link to the user profile page with a placeholder avatar.</p> <p></p>"},{"location":"tables/formatters/#in-built-renderers","title":"In-built renderers","text":""},{"location":"tables/formatters/#ap_main.formatters.actions","title":"<code>actions(value, options, column, row, table)</code>","text":"<p>Render actions for the table row.</p> PARAMETER DESCRIPTION <code>value</code> <p>string value</p> <p> TYPE: <code>Value</code> </p> <code>options</code> <p>options for the renderer</p> <p> TYPE: <code>Options</code> </p> <code>column</code> <p>column definition</p> <p> TYPE: <code>ColumnDefinition</code> </p> <code>row</code> <p>row data</p> <p> TYPE: <code>Row</code> </p> <code>table</code> <p>table definition</p> <p> TYPE: <code>TableDefinition</code> </p> Options <ul> <li><code>template</code> (str) - template to render the actions.</li> </ul> Source code in <code>ckanext/ap_main/formatters.py</code> <pre><code>@formatter\ndef actions(\n    value: types.Value,\n    options: types.Options,\n    column: types.ColumnDefinition,\n    row: types.Row,\n    table: types.TableDefinition,\n) -&gt; types.FormatterResult:\n    \"\"\"Render actions for the table row.\n\n    Args:\n        value: string value\n        options: options for the renderer\n        column: column definition\n        row: row data\n        table: table definition\n\n    Options:\n        - `template` (str) - template to render the actions.\n    \"\"\"\n\n    template = options.get(\"template\", \"admin_panel/tables/formatters/actions.html\")\n\n    return tk.literal(\n        tk.render(\n            template,\n            extra_vars={\"table\": table, \"column\": column, \"row\": row},\n        )\n    )\n</code></pre>"},{"location":"tables/formatters/#ap_main.formatters.bool","title":"<code>bool(value, options, column, row, table)</code>","text":"<p>Render a boolean value as a string.</p> PARAMETER DESCRIPTION <code>value</code> <p>boolean value</p> <p> TYPE: <code>Any</code> </p> <code>options</code> <p>options for the renderer</p> <p> TYPE: <code>Options</code> </p> <code>column</code> <p>column definition</p> <p> TYPE: <code>ColumnDefinition</code> </p> <code>row</code> <p>row data</p> <p> TYPE: <code>Row</code> </p> <code>table</code> <p>table definition</p> <p> TYPE: <code>TableDefinition</code> </p> <p>Returns:     \"Yes\" if value is True, otherwise \"No\"</p> Source code in <code>ckanext/ap_main/formatters.py</code> <pre><code>@formatter\ndef bool(\n    value: types.Value,\n    options: types.Options,\n    column: types.ColumnDefinition,\n    row: types.Row,\n    table: types.TableDefinition,\n) -&gt; types.FormatterResult:\n    \"\"\"Render a boolean value as a string.\n\n    Args:\n        value (Any): boolean value\n        options: options for the renderer\n        column: column definition\n        row: row data\n        table: table definition\n    Returns:\n        \"Yes\" if value is True, otherwise \"No\"\n    \"\"\"\n    return \"Yes\" if value else \"No\"\n</code></pre>"},{"location":"tables/formatters/#ap_main.formatters.date","title":"<code>date(value, options, name, record, table)</code>","text":"<p>Render a datetime object as a string.</p> PARAMETER DESCRIPTION <code>value</code> <p>date value</p> <p> TYPE: <code>datetime</code> </p> <code>options</code> <p>options for the renderer</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>name</code> <p>column name</p> <p> TYPE: <code>str</code> </p> <code>record</code> <p>row data</p> <p> TYPE: <code>Any</code> </p> <code>table</code> <p>table definition</p> <p> TYPE: <code>TableDefinition</code> </p> Options <ul> <li><code>date_format</code> (str) - date format string. Default is <code>%d/%m/%Y - %H:%M</code></li> </ul> RETURNS DESCRIPTION <code>str</code> <p>formatted date</p> Source code in <code>ckanext/ap_main/formatters.py</code> <pre><code>@formatter\ndef date(\n    value: datetime,\n    options: dict[str, Any],\n    name: str,\n    record: Any,\n    table: TableDefinition,\n) -&gt; str:\n    \"\"\"Render a datetime object as a string.\n\n    Args:\n        value (datetime): date value\n        options: options for the renderer\n        name (str): column name\n        record (Any): row data\n        table: table definition\n\n    Options:\n        - `date_format` (str) - date format string. **Default** is `%d/%m/%Y - %H:%M`\n\n    Returns:\n        formatted date\n    \"\"\"\n    date_format: str = options.get(\"date_format\", \"%d/%m/%Y - %H:%M\")\n\n    return tk.h.render_datetime(value, date_format=date_format)\n</code></pre>"},{"location":"tables/formatters/#ap_main.formatters.day_passed","title":"<code>day_passed(value, options, column, row, table)</code>","text":"<p>Calculate the number of days passed since the date.</p> PARAMETER DESCRIPTION <code>value</code> <p>date value</p> <p> TYPE: <code>Value</code> </p> <code>options</code> <p>options for the renderer</p> <p> TYPE: <code>Options</code> </p> <code>column</code> <p>column definition</p> <p> TYPE: <code>ColumnDefinition</code> </p> <code>row</code> <p>row data</p> <p> TYPE: <code>Row</code> </p> <code>table</code> <p>table definition</p> <p> TYPE: <code>TableDefinition</code> </p> <p>Returns:     A priority badge with day counter and color based on priority.</p> Source code in <code>ckanext/ap_main/formatters.py</code> <pre><code>@formatter\ndef day_passed(\n    value: types.Value,\n    options: types.Options,\n    column: types.ColumnDefinition,\n    row: types.Row,\n    table: types.TableDefinition,\n) -&gt; types.FormatterResult:\n    \"\"\"Calculate the number of days passed since the date.\n\n    Args:\n        value: date value\n        options: options for the renderer\n        column: column definition\n        row: row data\n        table: table definition\n    Returns:\n        A priority badge with day counter and color based on priority.\n    \"\"\"\n    if not value:\n        return \"0\"\n\n    try:\n        datetime_obj = datetime.fromisoformat(value)\n    except AttributeError:\n        return \"0\"\n\n    current_date = datetime.now()\n\n    days_passed = (current_date - datetime_obj).days\n\n    return tk.literal(\n        tk.render(\n            \"admin_panel/tables/formatters/day_passed.html\",\n            extra_vars={\"value\": days_passed},\n        )\n    )\n</code></pre>"},{"location":"tables/formatters/#ap_main.formatters.json_display","title":"<code>json_display(value, options, column, row, table)</code>","text":"<p>Render a JSON object as a string.</p> PARAMETER DESCRIPTION <code>value</code> <p>JSON object</p> <p> TYPE: <code>Value</code> </p> <code>options</code> <p>options for the renderer</p> <p> TYPE: <code>Options</code> </p> <code>column</code> <p>column definition</p> <p> TYPE: <code>ColumnDefinition</code> </p> <code>row</code> <p>row data</p> <p> TYPE: <code>Row</code> </p> <code>table</code> <p>table definition</p> <p> TYPE: <code>TableDefinition</code> </p> RETURNS DESCRIPTION <code>FormatterResult</code> <p>JSON object as a string</p> Source code in <code>ckanext/ap_main/formatters.py</code> <pre><code>@formatter\ndef json_display(\n    value: types.Value,\n    options: types.Options,\n    column: types.ColumnDefinition,\n    row: types.Row,\n    table: types.TableDefinition,\n) -&gt; types.FormatterResult:\n    \"\"\"Render a JSON object as a string.\n\n    Args:\n        value: JSON object\n        options: options for the renderer\n        column: column definition\n        row: row data\n        table: table definition\n\n    Returns:\n        JSON object as a string\n    \"\"\"\n    return tk.literal(\n        tk.render(\n            \"ap_cron/formatters/json.html\",\n            extra_vars={\"value\": value},\n        )\n    )\n</code></pre>"},{"location":"tables/formatters/#ap_main.formatters.list","title":"<code>list(value, options, column, row, table)</code>","text":"<p>Render a list as a comma-separated string.</p> PARAMETER DESCRIPTION <code>value</code> <p>list value</p> <p> TYPE: <code>Value</code> </p> <code>options</code> <p>options for the renderer</p> <p> TYPE: <code>Options</code> </p> <code>column</code> <p>column definition</p> <p> TYPE: <code>ColumnDefinition</code> </p> <code>row</code> <p>row data</p> <p> TYPE: <code>Row</code> </p> <code>table</code> <p>table definition</p> <p> TYPE: <code>TableDefinition</code> </p> RETURNS DESCRIPTION <code>FormatterResult</code> <p>comma-separated string</p> Source code in <code>ckanext/ap_main/formatters.py</code> <pre><code>@formatter\ndef list(\n    value: types.Value,\n    options: types.Options,\n    column: types.ColumnDefinition,\n    row: types.Row,\n    table: types.TableDefinition,\n) -&gt; types.FormatterResult:\n    \"\"\"Render a list as a comma-separated string.\n\n    Args:\n        value: list value\n        options: options for the renderer\n        column: column definition\n        row: row data\n        table: table definition\n\n    Returns:\n        comma-separated string\n    \"\"\"\n    return \", \".join(value)\n</code></pre>"},{"location":"tables/formatters/#ap_main.formatters.shorten_path","title":"<code>shorten_path(value, options, column, row, table)</code>","text":"<p>Shorten a path to a certain length.</p> PARAMETER DESCRIPTION <code>value</code> <p>path value</p> <p> TYPE: <code>Value</code> </p> <code>options</code> <p>options for the renderer</p> <p> TYPE: <code>Options</code> </p> <code>column</code> <p>column definition</p> <p> TYPE: <code>ColumnDefinition</code> </p> <code>row</code> <p>row data</p> <p> TYPE: <code>Row</code> </p> <code>table</code> <p>table definition</p> <p> TYPE: <code>TableDefinition</code> </p> Options <ul> <li><code>max_length</code> (int) - maximum length of the path. Default is <code>50</code></li> </ul> RETURNS DESCRIPTION <code>FormatterResult</code> <p>shortened path</p> Source code in <code>ckanext/ap_main/formatters.py</code> <pre><code>@formatter\ndef shorten_path(\n    value: types.Value,\n    options: types.Options,\n    column: types.ColumnDefinition,\n    row: types.Row,\n    table: types.TableDefinition,\n) -&gt; types.FormatterResult:\n    \"\"\"Shorten a path to a certain length.\n\n    Args:\n        value: path value\n        options: options for the renderer\n        column: column definition\n        row: row data\n        table: table definition\n\n    Options:\n        - `max_length` (int) - maximum length of the path. **Default** is `50`\n\n    Returns:\n        shortened path\n    \"\"\"\n    max_length: int = options.get(\"max_length\", 50)\n\n    if len(value) &lt;= max_length:\n        return value\n\n    half = (max_length - 3) // 2\n    return value[:half] + \"...\" + value[-half:]\n</code></pre>"},{"location":"tables/formatters/#ap_main.formatters.trim_string","title":"<code>trim_string(value, options, column, row, table)</code>","text":"<p>Trim string to a certain length.</p> PARAMETER DESCRIPTION <code>value</code> <p>string value</p> <p> TYPE: <code>Value</code> </p> <code>options</code> <p>options for the renderer</p> <p> TYPE: <code>Options</code> </p> <code>column</code> <p>column definition</p> <p> TYPE: <code>ColumnDefinition</code> </p> <code>row</code> <p>row data</p> <p> TYPE: <code>Row</code> </p> <code>table</code> <p>table definition</p> <p> TYPE: <code>TableDefinition</code> </p> Options <ul> <li><code>max_length</code> (int) - maximum length of the string. Default is <code>79</code></li> <li><code>add_ellipsis</code> (bool) - add ellipsis to the end of the string. Default is <code>True</code></li> </ul> RETURNS DESCRIPTION <code>FormatterResult</code> <p>trimmed string</p> Source code in <code>ckanext/ap_main/formatters.py</code> <pre><code>@formatter\ndef trim_string(\n    value: types.Value,\n    options: types.Options,\n    column: types.ColumnDefinition,\n    row: types.Row,\n    table: types.TableDefinition,\n) -&gt; types.FormatterResult:\n    \"\"\"Trim string to a certain length.\n\n    Args:\n        value: string value\n        options: options for the renderer\n        column: column definition\n        row: row data\n        table: table definition\n\n    Options:\n        - `max_length` (int) - maximum length of the string. **Default** is `79`\n        - `add_ellipsis` (bool) - add ellipsis to the end of the string. **Default** is `True`\n\n    Returns:\n        trimmed string\n    \"\"\"\n    if not value:\n        return \"\"\n\n    max_length: int = options.get(\"max_length\", 79)\n    trimmed_value: str = value[:max_length]\n\n    if tk.asbool(options.get(\"add_ellipsis\", True)):\n        trimmed_value += \"...\"\n\n    return trimmed_value\n</code></pre>"},{"location":"tables/formatters/#ap_main.formatters.user_link","title":"<code>user_link(value, options, column, row, table)</code>","text":"<p>Generate a link to the user profile page with an avatar.</p> <p>It's a custom implementation of the linked_user function, where we replace an actual user avatar with a placeholder.</p> <p>Fetching an avatar requires an additional user_show call, and it's too expensive to do it for every user in the list. So we use a placeholder</p> PARAMETER DESCRIPTION <code>value</code> <p>user ID</p> <p> TYPE: <code>str</code> </p> <code>options</code> <p>options for the renderer</p> <p> TYPE: <code>Options</code> </p> <code>column</code> <p>column definition</p> <p> TYPE: <code>ColumnDefinition</code> </p> <code>row</code> <p>row data</p> <p> TYPE: <code>Row</code> </p> <code>table</code> <p>table definition</p> <p> TYPE: <code>TableDefinition</code> </p> Options <ul> <li><code>maxlength</code> (int) - maximum length of the user name. Default is <code>20</code></li> <li><code>avatar</code> (int) - size of the avatar. Default is <code>20</code></li> </ul> RETURNS DESCRIPTION <code>FormatterResult</code> <p>User link with an avatar placeholder</p> Source code in <code>ckanext/ap_main/formatters.py</code> <pre><code>@formatter\ndef user_link(\n    value: types.Value,\n    options: types.Options,\n    column: types.ColumnDefinition,\n    row: types.Row,\n    table: types.TableDefinition,\n) -&gt; types.FormatterResult:\n    \"\"\"Generate a link to the user profile page with an avatar.\n\n    It's a custom implementation of the linked_user\n    function, where we replace an actual user avatar with a placeholder.\n\n    Fetching an avatar requires an additional user_show call, and it's too\n    expensive to do it for every user in the list. So we use a placeholder\n\n    Args:\n        value (str): user ID\n        options: options for the renderer\n        column: column definition\n        row: row data\n        table: table definition\n\n    Options:\n        - `maxlength` (int) - maximum length of the user name. **Default** is `20`\n        - `avatar` (int) - size of the avatar. **Default** is `20`\n\n    Returns:\n        User link with an avatar placeholder\n    \"\"\"\n    if not value:\n        return \"\"\n\n    user = model.User.get(value)\n\n    if not user:\n        return value\n\n    maxlength = options.get(\"maxlength\") or 20\n    avatar = options.get(\"maxlength\") or 20\n\n    display_name = user.display_name\n\n    if maxlength and len(user.display_name) &gt; maxlength:\n        display_name = display_name[:maxlength] + \"...\"\n\n    return tk.h.literal(\n        \"{icon} {link}\".format(\n            icon=tk.h.snippet(\n                \"user/snippets/placeholder.html\", size=avatar, user_name=display_name\n            ),\n            link=tk.h.link_to(display_name, tk.h.url_for(\"user.read\", id=user.name)),\n        )\n    )\n</code></pre>"}]}